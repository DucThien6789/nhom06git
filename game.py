import tkinter as tk
from tkinter import messagebox
import random

# ===== C·∫•u h√¨nh tr√≤ ch∆°i =====
CHOICES = ["K√©o", "B√∫a", "Bao"]
EMOJI = {"K√©o": "‚úÇÔ∏è", "B√∫a": "ü™®", "Bao": "üìÑ"}
BEATS = {"K√©o": "Bao", "B√∫a": "K√©o", "Bao": "B√∫a"}  # A th·∫Øng B n·∫øu BEATS[A] == B

# ===== ·ª®ng d·ª•ng =====
class RPSApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("K√©o ‚Äì B√∫a ‚Äì Bao")
        self.geometry("520x430")
        self.resizable(False, False)

        # Trung t√¢m m√†n h√¨nh
        self.update_idletasks()
        x = (self.winfo_screenwidth() - self.winfo_width()) // 2
        y = (self.winfo_screenheight() - self.winfo_height()) // 3
        self.geometry(f"+{x}+{y}")

        # ƒêi·ªÉm s·ªë
        self.user_score = 0
        self.cpu_score = 0
        self.round_num = 0

        self.build_ui()

    def build_ui(self):
        # Ti√™u ƒë·ªÅ
        title = tk.Label(self, text="K√©o ‚Äì B√∫a ‚Äì Bao", font=("Segoe UI", 20, "bold"))
        title.pack(pady=(14, 4))

        # Khung ƒëi·ªÉm
        score_frame = tk.Frame(self)
        score_frame.pack(pady=4)

        self.user_score_lbl = tk.Label(score_frame, text="B·∫°n: 0", font=("Segoe UI", 12))
        self.user_score_lbl.grid(row=0, column=0, padx=10)

        self.cpu_score_lbl = tk.Label(score_frame, text="M√°y: 0", font=("Segoe UI", 12))
        self.cpu_score_lbl.grid(row=0, column=1, padx=10)

        self.round_lbl = tk.Label(score_frame, text="V√°n: 0", font=("Segoe UI", 12))
        self.round_lbl.grid(row=0, column=2, padx=10)

        # Khung k·∫øt qu·∫£
        result_card = tk.Frame(self, bd=0, relief="groove", highlightthickness=1, highlightbackground="#ddd")
        result_card.pack(padx=16, pady=10, fill="x")

        vs = tk.Label(result_card, text="B·∫°n  vs  M√°y", font=("Segoe UI", 12))
        vs.pack(pady=(8, 2))

        self.choices_lbl = tk.Label(result_card, text="‚Äî", font=("Segoe UI Emoji", 26))
        self.choices_lbl.pack()

        self.outcome_lbl = tk.Label(result_card, text="H√£y ch·ªçn m·ªôt trong ba n√∫t b√™n d∆∞·ªõi!", font=("Segoe UI", 12))
        self.outcome_lbl.pack(pady=(4, 10))

        # N√∫t l·ª±a ch·ªçn
        buttons = tk.Frame(self)
        buttons.pack(pady=4)
        for i, c in enumerate(CHOICES):
            tk.Button(
                buttons, text=f"{EMOJI[c]}  {c}",
                font=("Segoe UI", 12, "bold"),
                width=10, height=1,
                command=lambda ch=c: self.play(ch)
            ).grid(row=0, column=i, padx=8, pady=4)

        # L·ªãch s·ª≠
        hist_frame = tk.Frame(self)
        hist_frame.pack(padx=16, pady=8, fill="both", expand=True)

        tk.Label(hist_frame, text="L·ªãch s·ª≠ (t·ªëi ƒëa 12 l∆∞·ª£t g·∫ßn nh·∫•t):", font=("Segoe UI", 11, "bold")).pack(anchor="w")
        self.history = tk.Listbox(hist_frame, height=8, font=("Consolas", 11))
        self.history.pack(fill="both", expand=True, pady=(4, 0))

        # Thanh d∆∞·ªõi: n√∫t Reset & H∆∞·ªõng d·∫´n
        bottom = tk.Frame(self)
        bottom.pack(pady=10)

        tk.Button(bottom, text="üîÑ Reset", font=("Segoe UI", 11), width=10, command=self.reset_game)\
            .grid(row=0, column=0, padx=6)

        tk.Button(bottom, text="‚ùì Lu·∫≠t ch∆°i", font=("Segoe UI", 11), width=10, command=self.show_rules)\
            .grid(row=0, column=1, padx=6)

        tk.Button(bottom, text="üö™ Tho√°t", font=("Segoe UI", 11), width=10, command=self.quit)\
            .grid(row=0, column=2, padx=6)

    def play(self, user_choice: str):
        cpu_choice = random.choice(CHOICES)
        self.round_num += 1

        # X√°c ƒë·ªãnh k·∫øt qu·∫£
        if user_choice == cpu_choice:
            outcome = "H√≤a ü§ù"
        elif BEATS[user_choice] == cpu_choice:
            outcome = "B·∫°n th·∫Øng üéâ"
            self.user_score += 1
        else:
            outcome = "B·∫°n thua üò¢"
            self.cpu_score += 1

        # C·∫≠p nh·∫≠t giao di·ªán
        self.choices_lbl.config(
            text=f"{EMOJI[user_choice]}  {user_choice}   ‚Äî   {EMOJI[cpu_choice]}  {cpu_choice}"
        )
        self.outcome_lbl.config(text=outcome)
        self.user_score_lbl.config(text=f"B·∫°n: {self.user_score}")
        self.cpu_score_lbl.config(text=f"M√°y: {self.cpu_score}")
        self.round_lbl.config(text=f"V√°n: {self.round_num}")

        # Ghi l·ªãch s·ª≠ (gi·ªØ 12 m·ª•c)
        line = f"V√°n {self.round_num:02d}: B·∫°n {user_choice:<3}  |  M√°y {cpu_choice:<3}  -> {outcome}"
        self.history.insert(0, line)
        if self.history.size() > 12:
            self.history.delete(tk.END)

    def reset_game(self):
        self.user_score = 0
        self.cpu_score = 0
        self.round_num = 0
        self.user_score_lbl.config(text="B·∫°n: 0")
        self.cpu_score_lbl.config(text="M√°y: 0")
        self.round_lbl.config(text="V√°n: 0")
        self.choices_lbl.config(text="‚Äî")
        self.outcome_lbl.config(text="H√£y ch·ªçn m·ªôt trong ba n√∫t b√™n d∆∞·ªõi!")
        self.history.delete(0, tk.END)

    def show_rules(self):
        messagebox.showinfo(
            "Lu·∫≠t ch∆°i",
            "K√©o c·∫Øt Bao, B√∫a ƒë·∫≠p K√©o, Bao b·ªçc B√∫a.\n"
            "Ch·ªçn m·ªôt trong ba: K√©o / B√∫a / Bao. M√°y s·∫Ω ch·ªçn ng·∫´u nhi√™n.\n"
            "Th·∫Øng: +1 ƒëi·ªÉm, Thua: +1 ƒëi·ªÉm cho m√°y, H√≤a: kh√¥ng ai + ƒëi·ªÉm."
        )

if __name__ == "__main__":
    app = RPSApp()
    app.mainloop()
